
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a3  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000183  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    unsigned int ch[]={0X00,0X01,0X02,0X03,0X04,0X05,0X06,0X07,0X10,0X11};
  96:	84 e1       	ldi	r24, 0x14	; 20
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
    unsigned int i = 0;
    unsigned int j = 0;
    DDRA = 0XFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0XFF;
  ac:	87 bb       	out	0x17, r24	; 23

int main(void)
{
    unsigned int ch[]={0X00,0X01,0X02,0X03,0X04,0X05,0X06,0X07,0X10,0X11};
    unsigned int i = 0;
    unsigned int j = 0;
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0


int main(void)
{
    unsigned int ch[]={0X00,0X01,0X02,0X03,0X04,0X05,0X06,0X07,0X10,0X11};
    unsigned int i = 0;
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x3a>
				i=0;
				j++;
			}
			if (j == 10)
			{
				j = 0;
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
    DDRA = 0XFF;
    DDRB = 0XFF;
	
    while (1) 
    {	
		PORTA = 0X04;
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	8b bb       	out	0x1b, r24	; 27
		PORTB = ch[i];
  c0:	f9 01       	movw	r30, r18
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	8c 0f       	add	r24, r28
  cc:	9d 1f       	adc	r25, r29
  ce:	e8 0f       	add	r30, r24
  d0:	f9 1f       	adc	r31, r25
  d2:	80 81       	ld	r24, Z
  d4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	66 e7       	ldi	r22, 0x76	; 118
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	91 50       	subi	r25, 0x01	; 1
  de:	60 40       	sbci	r22, 0x00	; 0
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x64>
  e6:	00 00       	nop
		_delay_ms(30);
		PORTA = 0X08;
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	8b bb       	out	0x1b, r24	; 27
		PORTB = ch[j];
  ec:	fa 01       	movw	r30, r20
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	8c 0f       	add	r24, r28
  f8:	9d 1f       	adc	r25, r29
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	80 81       	ld	r24, Z
 100:	88 bb       	out	0x18, r24	; 24
 102:	9f ef       	ldi	r25, 0xFF	; 255
 104:	66 e7       	ldi	r22, 0x76	; 118
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	91 50       	subi	r25, 0x01	; 1
 10a:	60 40       	sbci	r22, 0x00	; 0
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x86>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x90>
 112:	00 00       	nop
		_delay_ms(30);
		if (PINC == 0x00)
 114:	83 b3       	in	r24, 0x13	; 19
 116:	81 11       	cpse	r24, r1
 118:	d1 cf       	rjmp	.-94     	; 0xbc <main+0x3a>
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	63 ec       	ldi	r22, 0xC3	; 195
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	91 50       	subi	r25, 0x01	; 1
 122:	60 40       	sbci	r22, 0x00	; 0
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x9e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xa8>
 12a:	00 00       	nop
		{
			_delay_ms(200);
			
			i++;
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
			if (i == 10)
 130:	2a 30       	cpi	r18, 0x0A	; 10
 132:	31 05       	cpc	r19, r1
 134:	21 f4       	brne	.+8      	; 0x13e <main+0xbc>
			{
				i=0;
				j++;
 136:	4f 5f       	subi	r20, 0xFF	; 255
 138:	5f 4f       	sbci	r21, 0xFF	; 255
			_delay_ms(200);
			
			i++;
			if (i == 10)
			{
				i=0;
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
				j++;
			}
			if (j == 10)
 13e:	4a 30       	cpi	r20, 0x0A	; 10
 140:	51 05       	cpc	r21, r1
 142:	09 f0       	breq	.+2      	; 0x146 <main+0xc4>
 144:	bb cf       	rjmp	.-138    	; 0xbc <main+0x3a>
 146:	b8 cf       	rjmp	.-144    	; 0xb8 <main+0x36>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
